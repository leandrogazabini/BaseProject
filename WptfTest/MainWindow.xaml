<UserControl x:Class="WptfTest.MainWindow"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:local="clr-namespace:WptfTest"
	mc:Ignorable="d"
		
	xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
	xmlns:fw="clr-namespace:SourceChord.FluentWPF;assembly=FluentWPF"
	xmlns:materialDesignExtensions="clr-namespace:MaterialDesignExtensions.Controls;assembly=MaterialDesignExtensions"
		
		
	xmlns:userControl="clr-namespace:WptfTest.Views.GeneralUserControls"
	xmlns:MainView="clr-namespace:WptfTest.Views.MainView"
	xmlns:converters="clr-namespace:WptfTest.Converters"

	
	fw:AcrylicWindow.Enabled="True"
	fw:AcrylicWindow.NoiseOpacity="0.001"
	fw:AcrylicWindow.TintColor="White"
	fw:AcrylicWindow.TintOpacity="0.65"
	fw:AcrylicWindow.AcrylicWindowStyle="None"
		
	xmlns:viewModel="clr-namespace:WptfTest"
	xmlns:viewModel2="clr-namespace:WptfTest.ViewModels.MainView"
	xmlns:view2="clr-namespace:WptfTest.Views.MainView"
			 
	MinHeight="600" MinWidth="800"
	d:DataContext="{d:DesignInstance Type=viewModel:MainWindowViewModel, IsDesignTimeCreatable=True}"
		
		x:Name="mainWindow"
		>


	<UserControl.DataContext>
		<viewModel:MainWindowViewModel/>
	</UserControl.DataContext>

	<UserControl.Resources>
		<converters:ViewItemVisibility  x:Key="viewItemVisibility"/>
	</UserControl.Resources>


	<DockPanel>

		<materialDesign:DrawerHost IsLeftDrawerOpen="{Binding IsMenuOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
								   OpenMode="Default" MaxHeight="{Binding ElementName=mainWindow, Path=ActualHeight}"
								   VerticalContentAlignment="Top"
								   materialDesign:ShadowAssist.ShadowDepth="Depth5"
								   >
			<materialDesign:DrawerHost.LeftDrawerContent>

				<StackPanel VerticalAlignment="Top" Width="300">
					<!--Menu title here-->
					<Grid Height="{Binding ElementName=mainWindow, Path=ActualHeight}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" MaxWidth="300"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="auto"/>
							<RowDefinition Height="auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>

						<TextBlock Text="MENU" 
								   Grid.Column="0" 
								   Grid.ColumnSpan="2"
								   Grid.Row="0"
								   Style="{StaticResource MaterialDesignHeadline6TextBlock}" VerticalAlignment="Center" HorizontalAlignment="Center"/>


						<ToggleButton Style="{StaticResource MaterialDesignHamburgerToggleButton}"  
									  Grid.Column="0"
									  Grid.Row="0"
									  HorizontalAlignment="Left" 
									  Margin="16"
									  IsChecked="{Binding IsMenuOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

						<!--Menu itens here -->
						<!--Menu search -->
						<GroupBox Header="Search "
								  Grid.Row="1"
								  Grid.Column="0"
								  Style="{DynamicResource MaterialDesignHeaderedContentControl}"
								  Margin="8"
								  materialDesign:ShadowAssist.ShadowDepth="Depth3"
								  BorderThickness="0">
							<GroupBox.HeaderTemplate>
								<DataTemplate>
									<StackPanel Orientation="Horizontal">
										<materialDesign:PackIcon Kind="Search"
																  Height="32"
																  Width="32"
																  VerticalAlignment="Center" />
										<TextBlock Margin="8,0,0,0"
													  VerticalAlignment="Center"
													  Style="{StaticResource MaterialDesignSubtitle1TextBlock}"
													  Text="{Binding}" />
									</StackPanel>
								</DataTemplate>
							</GroupBox.HeaderTemplate>
							<StackPanel>

								<TextBox  Text="{Binding SearchKeyword, UpdateSourceTrigger=PropertyChanged}"
										  Name="MenuSearch"
										  Margin="16"
										  
										  Height="50"
										  materialDesign:HintAssist.Hint="Search"
										  materialDesign:HintAssist.IsFloating="True"
										  materialDesign:TextFieldAssist.HasClearButton="True"
										  materialDesign:TextFieldAssist.HasOutlinedTextField="True"
										  materialDesign:TextFieldAssist.DecorationVisibility="Collapsed"
										  materialDesign:TextFieldAssist.TextFieldCornerRadius="3">
									<TextBox.InputBindings>
										<KeyBinding CommandParameter="{Binding ElementName=MenuSearch, Path=Text}" 
													Command="{Binding SearchMenuItemsCommand}" 
													Key="Return" />

									</TextBox.InputBindings>

								</TextBox>

								<ItemsControl ItemsSource="{Binding MenuItensFoundInSearch, UpdateSourceTrigger=PropertyChanged}"
										  Margin="{Binding ElementName=MenuSearch, Path=Margin}"
										  MaxWidth="{Binding ElementName=MenuSearch, Path=Width}">
									<ItemsControl.ItemTemplate>
										<DataTemplate>
											<Button Content="{Binding MenuN1ItemName}"
													CommandParameter="{Binding}"
													Command="{Binding Path=DataContext.TestNewCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}} }"
																		
													Style="{StaticResource MaterialDesignRaisedAccentButton}"
													ToolTip="{Binding MenuN1IToolTip}"/>
										</DataTemplate>
									</ItemsControl.ItemTemplate>
								</ItemsControl>

							</StackPanel>

						</GroupBox>

						<!--Menu collection -->
						<GroupBox Header="{Binding MenuItensList[0].MenuName}"
								  Grid.Row="2"
								  Style="{DynamicResource MaterialDesignGroupBox}"
								  
								  Margin="8"
								  
								  Name="GrouBoxMenuCollection"
								  materialDesign:ShadowAssist.ShadowDepth="Depth3"
								  BorderThickness="0">
							<GroupBox.HeaderTemplate>
								<DataTemplate>
									<StackPanel Orientation="Horizontal">
										<materialDesign:PackIcon Kind="ImageArea"
																  Height="32"
																  Width="32"
																  VerticalAlignment="Center" />
										<TextBlock Margin="8,0,0,0"
													  VerticalAlignment="Center"
													  Style="{StaticResource MaterialDesignSubtitle1TextBlock}"
													  Text="{Binding}" />
									</StackPanel>
								</DataTemplate>
							</GroupBox.HeaderTemplate>

							<ScrollViewer Margin="0 0 -8 0">
								<StackPanel>
									<ItemsControl ItemsSource="{Binding MenuItensList[0].MenuN1SubList}" 
												  x:Name="MyItems"
												  Padding="0"
												  Background="{x:Null}">
										<ItemsControl.ItemTemplate>
											<DataTemplate>

												<Expander Header="{Binding MenuN1Name}" Background="{x:Null}"
														  Visibility="{Binding Path=Visibility, Converter={StaticResource viewItemVisibility}}">
													<ItemsControl x:Name="MyItems2" 
																  ItemsSource="{Binding Path=MenuN1ItensList}" 
																  Padding=" 10 0 0 0">
														<ItemsControl.ItemTemplate>
															<DataTemplate>
																<!-- i will keep it to remember me how to use, when i need to use an other instance of viewModel
																and a in a paramether a new instance too-->
																<!--<Button Content="Button"  
																		CommandParameter="{Binding Source={StaticResource mainDataContext}}"
																		Command="{Binding DoExempleCommand, Source={StaticResource mainDataContext}}" >

																</Button>-->
																<!--here i use a new instance of viewModel, but in parameter i send a relative source
																it's not what i want too-->
																<!--<Button Margin="10"
																			Content="Funcionou, mas instancio outra viewmode"
																			CommandParameter="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
																			Command="{Binding DoExempleCommand, Source={StaticResource mainDataContext}}"
																			/>-->
																<StackPanel>
																	<!-- HERE!! -->
																	<!-- It's what im look for. i use a command by relative source, 
																	and the data context too!-->


																	<Button Margin="16 4 "
																			Content="{Binding Path=MenuN1ItemName}"
																			IsEnabled="{Binding Path=Visibility}"
																			Visibility="{Binding Path=Visibility, Converter={StaticResource viewItemVisibility}}"

																			CommandParameter="{Binding}"
																			Command="{Binding Path=DataContext.TestNewCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}} }"
																		
																			Style="{StaticResource MaterialDesignFlatButton}"
																			HorizontalContentAlignment="Stretch"
																			>
																	</Button>

																</StackPanel>

															</DataTemplate>

														</ItemsControl.ItemTemplate>
													</ItemsControl>
												</Expander>

											</DataTemplate>
										</ItemsControl.ItemTemplate>
									</ItemsControl>

								</StackPanel>
							</ScrollViewer>

						</GroupBox>


					</Grid>

				</StackPanel>
			</materialDesign:DrawerHost.LeftDrawerContent>

			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition Height="auto"/>
					<RowDefinition Height="*"/>
					<RowDefinition Height="auto"/>
				</Grid.RowDefinitions>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="auto"/>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="auto"/>
				</Grid.ColumnDefinitions>


				<materialDesign:ColorZone Mode="Standard"
										  Padding="16"
										  Grid.ColumnSpan="99">


					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="auto"/>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="auto"/>
						</Grid.ColumnDefinitions>
						<ToggleButton Grid.Column="0"
									  Style="{DynamicResource MaterialDesignHamburgerToggleButton}"
									  IsChecked="{Binding IsMenuOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>



						<TextBlock Grid.Column="1" HorizontalAlignment="Center " VerticalAlignment="Center"
								   Style="{StaticResource MaterialDesignHeadline6TextBlock}"
								   Text="{Binding SelectedViewToShow.ViewTitle, UpdateSourceTrigger=PropertyChanged}"/>

						<materialDesign:PopupBox Grid.Column="2" 
												 StaysOpen="True"
												 IsEnabled="True">
							<StackPanel Height="200"
										Width="100">
								<Button Command="{x:Static materialDesign:Transitioner.MovePreviousCommand}" >voltar</Button>
								<Button Command="{x:Static materialDesign:Transitioner.MoveNextCommand}" >avancar</Button>

							</StackPanel>
						</materialDesign:PopupBox>



					</Grid>

				</materialDesign:ColorZone>


				<Grid Grid.Row="1"
					  Grid.ColumnSpan="99">

					<materialDesign:ColorZone>
						
						<TabControl ItemsSource="{Binding ViewsToShow}"
								SelectedItem="{Binding SelectedViewToShow, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
								SelectedIndex="{Binding SelectedViewToShowTabIndex, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
								TabStripPlacement="Top"
								Margin="0" Background="{x:Null}"
								BorderThickness="0"
								IsSynchronizedWithCurrentItem="True"
								Style="{StaticResource MaterialDesignTabControl}">

							<TabControl.ItemTemplate>
								<DataTemplate >
									<DockPanel>
										<Button HorizontalAlignment="Right" Style="{StaticResource WindowCloseButtonStyle}"
												CommandParameter="{Binding }"
												Command="{Binding Path=DataContext.RemoveIntemFromMainTabCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}} }"
																		
												Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}">
											<materialDesign:PackIcon Kind="WindowClose"/>
										</Button>

										<TextBlock Text="{Binding ViewTitle}" Margin="8"
										   Visibility="{Binding Visibility, Converter={StaticResource viewItemVisibility}}"
										   />
									</DockPanel>
								</DataTemplate>
							</TabControl.ItemTemplate>


							<TabControl.Resources>
								<DataTemplate DataType="{x:Type viewModel2:TestViewModel}">
									<view2:TestView/>
								</DataTemplate>
								<DataTemplate DataType="{x:Type viewModel2:MainViewModel}">
									<view2:MainView/>
								</DataTemplate>
							</TabControl.Resources>

						</TabControl>
					</materialDesign:ColorZone>




				</Grid>


				<Grid Grid.Row="2"
					  Grid.ColumnSpan="99">
					<materialDesign:ColorZone Mode="Inverted"
											  Background="Black"
											  Foreground="White"
											  Padding="10"
											  ClipToBounds="False">

						<StackPanel HorizontalAlignment="Right" VerticalAlignment="Center" Margin="16 0 16 0"
									Orientation="Horizontal">

							<TextBlock>
								<Run Text="USER:"/>
								<Run Text="{Binding loggedUser.UserName, UpdateSourceTrigger=PropertyChanged}"/>
								<Run Text="    |    PROFILE:"/>
								<Run Text="{Binding loggedUser.UserProfile, UpdateSourceTrigger=PropertyChanged}"/>
								<Run Text="    "/>
							</TextBlock>


							<materialDesign:Badged Badge="{Binding ViewsToShow.Count}"
													VerticalAlignment="Top">
								<Button Content="Some action" />
							</materialDesign:Badged>
						</StackPanel>
					</materialDesign:ColorZone>
				</Grid>





			</Grid>

		</materialDesign:DrawerHost>
	</DockPanel>
</UserControl>
