<Window x:Class="WptfTest.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="clr-namespace:WptfTest"
    mc:Ignorable="d"
        
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:fw="clr-namespace:SourceChord.FluentWPF;assembly=FluentWPF"
                    
    xmlns:userControl="clr-namespace:WptfTest.Views.GeneralUserControls"
    xmlns:MainView="clr-namespace:WptfTest.Views.MainView"
    xmlns:converters="clr-namespace:WptfTest.Converters"

    
	fw:AcrylicWindow.Enabled="True"
    fw:AcrylicWindow.NoiseOpacity="0.001"
    fw:AcrylicWindow.TintColor="White"
    fw:AcrylicWindow.TintOpacity="0.65"
    fw:AcrylicWindow.AcrylicWindowStyle="None"
        
    xmlns:viewModel="clr-namespace:WptfTest"
	xmlns:viewModel2="clr-namespace:WptfTest.ViewModels.MainView"
    xmlns:view2="clr-namespace:WptfTest.Views.MainView"
	
    Title="Name here" MinHeight="450" Width="800" WindowStartupLocation="CenterScreen" WindowState="Maximized" 
	d:DataContext="{d:DesignInstance Type=viewModel:MainWindowViewModel, IsDesignTimeCreatable=True}"
		
		x:Name="mainWindow"
		>
	<!--<Window.Resources>
		<DataTemplate x:Key="TabControlContentTemplate1">
			<view2:MainView/>
		</DataTemplate>
	</Window.Resources>-->

	<Window.DataContext>
		<viewModel:MainWindowViewModel/>
	</Window.DataContext>
	<!-- it seens to use another instance of my view model and I don't whant it.
	it's a try about my commands into a item control, that is in another item control, i was losing my data context
	i solved it using another aproach: i use 'find antecestor' in binding ... it works fine :) -->
	<!--
	<Window.Resources>
		<viewModel:MainWindowViewModel x:Key="mainDataContext"/>
	</Window.Resources>-->
	<Window.Resources>
		<converters:ViewItemVisibility  x:Key="viewItemVisibility"/>
	</Window.Resources>


	<DockPanel>
		<!-- Menu here -->
		<materialDesign:DrawerHost IsLeftDrawerOpen="{Binding IsMenuOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
								   OpenMode="Default" MaxHeight="{Binding ElementName=mainWindow, Path=ActualHeight}"
								   VerticalContentAlignment="Top"
								   materialDesign:ShadowAssist.ShadowDepth="Depth5">
			<materialDesign:DrawerHost.LeftDrawerContent >

				<StackPanel VerticalAlignment="Top">
					<!--Menu title here-->
					<Grid Height="{Binding ElementName=mainWindow, Path=ActualHeight}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="auto"/>
							<RowDefinition Height="auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>

						<TextBlock Text="MENU" 
								   Grid.Column="0" 
								   Grid.ColumnSpan="2"
								   Grid.Row="0"
								   Style="{StaticResource MaterialDesignHeadline6TextBlock}" VerticalAlignment="Center" HorizontalAlignment="Center"/>


						<ToggleButton Style="{StaticResource MaterialDesignHamburgerToggleButton}"  
									  Grid.Column="0"
									  Grid.Row="0"
									  HorizontalAlignment="Left" 
									  Margin="16"
									  IsChecked="{Binding IsMenuOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

						<!--Menu itens here -->
						<!--Menu search -->
						<GroupBox Header="Search "
								  Grid.Row="1"
								  Grid.Column="0"
								  Style="{DynamicResource MaterialDesignGroupBox}"
								  Margin="8"
								  materialDesign:ShadowAssist.ShadowDepth="Depth3"
								  BorderThickness="0">
							<GroupBox.HeaderTemplate>
								<DataTemplate>
									<StackPanel Orientation="Horizontal">
										<materialDesign:PackIcon Kind="Search"
																  Height="32"
																  Width="32"
																  VerticalAlignment="Center" />
										<TextBlock Margin="8,0,0,0"
													  VerticalAlignment="Center"
													  Style="{StaticResource MaterialDesignSubtitle1TextBlock}"
													  Text="{Binding}" />
									</StackPanel>
								</DataTemplate>
							</GroupBox.HeaderTemplate>
							<StackPanel>

								<TextBox  x:Name="DemoItemsSearchBox"
										Text="{Binding SearchKeyword, UpdateSourceTrigger=PropertyChanged}"
										Margin="16"
										Width="200"
										Height="50"
										materialDesign:HintAssist.Hint="Search"
										materialDesign:HintAssist.IsFloating="True"
										materialDesign:TextFieldAssist.HasClearButton="True"
										materialDesign:TextFieldAssist.HasOutlinedTextField="True"
										materialDesign:TextFieldAssist.DecorationVisibility="Collapsed"
										materialDesign:TextFieldAssist.TextFieldCornerRadius="3"/>
								<ListView Margin="{Binding ElementName=DemoItemsSearchBox, Path=Margin}">
									<ListViewItem Content="Hello" />

								</ListView>
								<Button CommandParameter="{Binding ViewHelpMessage}"
										Command="{Binding TestNewCommand}" Content="test"/>
							</StackPanel>

						</GroupBox>

						<!--Menu collection -->
						<GroupBox Header="{Binding MenuItensList[0].MenuName}"
								  Grid.Row="2"
								  Style="{DynamicResource MaterialDesignGroupBox}"
								  Margin="8"
								  Name="GrouBoxMenuCollection"
								  materialDesign:ShadowAssist.ShadowDepth="Depth3"
								  BorderThickness="0">
							<GroupBox.HeaderTemplate>
								<DataTemplate>
									<StackPanel Orientation="Horizontal">
										<materialDesign:PackIcon Kind="ImageArea"
																  Height="32"
																  Width="32"
																  VerticalAlignment="Center" />
										<TextBlock Margin="8,0,0,0"
													  VerticalAlignment="Center"
													  Style="{StaticResource MaterialDesignSubtitle1TextBlock}"
													  Text="{Binding}" />
									</StackPanel>
								</DataTemplate>
							</GroupBox.HeaderTemplate>

							<ScrollViewer Margin="0 0 -8 0">
								<StackPanel>
									<ItemsControl ItemsSource="{Binding MenuItensList[0].MenuN1SubList}" 
												  x:Name="MyItems"
												  Padding="0"
												  Background="{x:Null}">
										<ItemsControl.ItemTemplate>
											<DataTemplate>

												<Expander Header="{Binding MenuN1Name}" Background="{x:Null}"
														  Visibility="{Binding Path=Visibility, Converter={StaticResource viewItemVisibility}}">
													<ItemsControl x:Name="MyItems2" 
																  ItemsSource="{Binding Path=MenuN1ItensList}" 
																  Padding=" 10 0 0 0">
														<ItemsControl.ItemTemplate>
															<DataTemplate>
																<!-- i will keep it to remember me how to use, when i need to use an other instance of viewModel
																and a in a paramether a new instance too-->
																<!--<Button Content="Button"  
																		CommandParameter="{Binding Source={StaticResource mainDataContext}}"
																		Command="{Binding DoExempleCommand, Source={StaticResource mainDataContext}}" >

																</Button>-->
																<!--here i use a new instance of viewModel, but in parameter i send a relative source
																it's not what i want too-->
																<!--<Button Margin="10"
																			Content="Funcionou, mas instancio outra viewmode"
																			CommandParameter="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
																			Command="{Binding DoExempleCommand, Source={StaticResource mainDataContext}}"
																			/>-->
																<StackPanel>
																	<!-- HERE!! -->
																	<!-- It's what im look for. i use a command by relative source, 
																	and the data context too!-->

																	<Button Margin="16 4 "
																		Content="{Binding Path=Visibility}"
																		IsEnabled="{Binding Path=Visibility}"
																		Visibility="{Binding Path=Visibility, Converter={StaticResource viewItemVisibility}}"

																		CommandParameter="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
																		Command="{Binding Path=DataContext.DoExempleCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}} }"
																		Style="{StaticResource MaterialDesignFlatButton}"
																		HorizontalContentAlignment="Stretch"
																			>
																	</Button>
																	<Button Margin="16 4 "
																		Content="Button 2"
																		IsEnabled="{Binding Path=Visibility}"
																		Visibility="{Binding Path=Visibility, Converter={StaticResource viewItemVisibility}}"

																		CommandParameter="{Binding Path=ViewName, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
																		Command="{Binding Path=DataContext.TestNewCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}} }"
																		Style="{StaticResource MaterialDesignFlatButton}"
																		HorizontalContentAlignment="Stretch"
																			>
																	</Button>


																</StackPanel>

															</DataTemplate>

														</ItemsControl.ItemTemplate>
													</ItemsControl>
												</Expander>

											</DataTemplate>
										</ItemsControl.ItemTemplate>
									</ItemsControl>

								</StackPanel>
							</ScrollViewer>

						</GroupBox>


					</Grid>

				</StackPanel>
			</materialDesign:DrawerHost.LeftDrawerContent>

			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition Height="auto"/>
					<RowDefinition Height="*"/>
					<RowDefinition Height="auto"/>
				</Grid.RowDefinitions>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="auto"/>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="auto"/>
				</Grid.ColumnDefinitions>


				<materialDesign:ColorZone Mode="Standard"
										  Padding="16"
										  Grid.ColumnSpan="99">


					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="auto"/>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="auto"/>
						</Grid.ColumnDefinitions>
						<ToggleButton Grid.Column="0"
									  Style="{DynamicResource MaterialDesignHamburgerToggleButton}"
									  IsChecked="{Binding IsMenuOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>



						<TextBlock Grid.Column="1" HorizontalAlignment="Center " VerticalAlignment="Center"
								   Style="{StaticResource MaterialDesignHeadline6TextBlock}"
								   Text="{Binding SelectedViewToShow.ViewTitle, UpdateSourceTrigger=PropertyChanged}"/>
						<!--ListBox with Content Control is nice, and i probally not using in the best practice, it seens consume a lot of ram
						and instance a new viewmodel everytime i select a item. I'm going to use tabcontrol to display views-->

						<!--<ListBox Grid.Column="1"
								 SelectedItem="{Binding SelectedViewToShow, UpdateSourceTrigger=PropertyChanged}"
											 ItemsSource="{Binding ViewsToShow	}"
											 Style="{StaticResource MaterialDesignChoiceChipPrimaryListBox}"
											 materialDesign:ThemeAssist.Theme="Inherit">

							<ListBox.ItemsPanel>
								<ItemsPanelTemplate>
									<WrapPanel Orientation="Horizontal" IsItemsHost="True" Margin="10 0 0 0"/>
								</ItemsPanelTemplate>
							</ListBox.ItemsPanel>
							<ListBox.ItemTemplate>
								<DataTemplate>
									<TextBlock Text="{Binding blabla}" Margin=" 10 0 10 0"/>
								</DataTemplate>
							</ListBox.ItemTemplate>

						</ListBox>-->
						<materialDesign:PopupBox Grid.Column="2" 
												 StaysOpen="True"
												 IsEnabled="True">
							<StackPanel Height="200"
										Width="100">

							</StackPanel>
						</materialDesign:PopupBox>



					</Grid>

				</materialDesign:ColorZone>


				<Grid Grid.Row="1"
					  Grid.ColumnSpan="99">

					<TabControl Name="Menu"
									ItemsSource="{Binding ViewsToShow}"
									
									TabStripPlacement="Top"
									
									Margin="0" Background="{x:Null}"
									BorderThickness="0"
									Style="{StaticResource MaterialDesignNavigatilRailTabControl}"
								    IsSynchronizedWithCurrentItem="True"
									
									>


						<TabControl.ItemTemplate>
							<DataTemplate>
								

								<TextBlock Text="{Binding Visibility}" Margin="16 8"
										   Visibility="{Binding Visibility, Converter={StaticResource viewItemVisibility}}"/>
								
								
							</DataTemplate>


						</TabControl.ItemTemplate>
						
						<TabControl.Template>
							<ControlTemplate TargetType="{x:Type TabControl}">
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto"/>
										<RowDefinition/>
									</Grid.RowDefinitions>
									<ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled">
										<TabPanel x:Name="HeaderPanel" IsItemsHost="True" Margin="0,4,0,0"/>
									</ScrollViewer>
									<ContentPresenter x:Name="PART_SelectedContentHost" Margin="4" ContentSource="SelectedContent" Grid.Row="1"/>
								</Grid>
							</ControlTemplate>
						</TabControl.Template>


						<TabControl.Resources>
							<DataTemplate DataType="{x:Type viewModel2:TestViewModel}">
								<view2:TestView/>
							</DataTemplate>
							<DataTemplate DataType="{x:Type viewModel2:MainViewModel}">
								<view2:MainView/>
							</DataTemplate>


							<Style TargetType="{x:Type TabItem}">
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type TabItem}">
											<Grid>
												
												<ContentPresenter x:Name="ContentSite" ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2,2,12,2" RecognizesAccessKey="True">
													
												</ContentPresenter>
												
											</Grid>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>
						</TabControl.Resources>

					</TabControl>



					<!--It works like a iframe in html, but seen use a lot of ram, and seens to instance a new viewmodel 
							everu time i select a diferent item in the listview "views to show"
							instead content control, i'll try to adapt tab control-->
					<!--<ContentControl x:Name="contentControl" DataContext="{Binding SelectedViewToShow}"
											Margin="50"
											Content="{Binding Viewww, UpdateSourceTrigger=PropertyChanged}">
								<ContentControl.Resources>
									<DataTemplate DataType="{x:Type userControl:UserControlBase}">
										<userControl:UserControlBase />
									</DataTemplate>
									<DataTemplate DataType="{x:Type viewModel2:TestViewModel}">
										<view2:TestView />
									</DataTemplate>
									<DataTemplate DataType="{x:Type viewModel2:MainViewModel}">
										<view2:MainView/>
									</DataTemplate>
								</ContentControl.Resources>

							</ContentControl>-->


					<!--<materialDesign:Card Margin="10">

					<StackPanel Margin="0">
						<Expander Header="Item" >
							<StackPanel>
								<Button></Button>
								<Expander Header="Item2" Margin="10 5 5 5">
									<Expander Header="Item3" Margin="10 0 0 0">
										<StackPanel >
											<Button>b</Button>
										</StackPanel>

									</Expander>
								</Expander>
							</StackPanel>
						</Expander>
						<Expander Header="Item">

						</Expander>
						<Expander Header="Item">

						</Expander>
						<Expander Header="Item">

						</Expander>
					</StackPanel>
				</materialDesign:Card>-->
					<!--<ContentControl Grid.Column="1"
                            DataContext="{Binding }"
						    Content="{Binding Path=Length, UpdateSourceTrigger=PropertyChanged}">
					<ContentControl.Resources>
						<DataTemplate DataType="{x:Type viewModel2:MainView}">
							<Button>asdadas</Button>
						</DataTemplate>
						<DataTemplate DataType="jaca">
							<UserControl>
								<viewModel2:MainView></viewModel2:MainView>
							</UserControl>
						</DataTemplate>
					</ContentControl.Resources>
				</ContentControl>-->
				</Grid>


				<Grid Grid.Row="2"
					  Grid.ColumnSpan="99">
					<materialDesign:ColorZone
											  Mode="Dark"
											  Background="Black"
											  Foreground="White"
											  Padding="10"
											  ClipToBounds="False">
						<StackPanel HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="16 0 16 0"
										Orientation="Horizontal">

							<TextBlock
										 VerticalAlignment="Center"
     
											 Text="Material Design In XAML Toolkit" />
							<materialDesign:Badged
													  Badge="{Binding ViewsToShow.Count}"
													  VerticalAlignment="Top">
								<Button
											 Content="Some action" />
							</materialDesign:Badged>
						</StackPanel>
					</materialDesign:ColorZone>
				</Grid>




				<!--<simpleChildWindow:ChildWindow 
                
                AllowMove="False"
                       
                Grid.ColumnSpan="999"
                Grid.RowSpan="999"
                        
                CloseByEscape="False"
                CloseOnOverlay ="False"
                ShowCloseButton="True"
            
                ShowTitleBar="True"                   
         
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                
                Margin="0"
            
                IsModal="False"
                                    
                IsOpen="False">

				<DockPanel Height="150" Width="150">


				</DockPanel>
			</simpleChildWindow:ChildWindow>
			<mahapps:FlyoutsControl>
				<mahapps:Flyout Position="Top"
                            
                            CloseButtonVisibility="Collapsed"
                            TitleVisibility="Collapsed"
                            mahapps:HeaderedControlHelper.HeaderMargin="0"
                            mahapps:HeaderedControlHelper.HeaderVerticalContentAlignment="Top"
                            mahapps:HeaderedControlHelper.HeaderFontWeight="Normal"
                            IsOpen="True"
                            AreAnimationsEnabled="True"
                            AnimateOpacity="True"
                            AnimateOnPositionChange="True"
                            Theme="Dark"
                        
                            VerticalAlignment="Top"
                            VerticalContentAlignment="Top"
                            HorizontalContentAlignment="Stretch"
                            Panel.ZIndex="9999"
                            Height="80"
                            IsAutoCloseEnabled="True"
                            AutoCloseInterval="3000">


				</mahapps:Flyout>
			</mahapps:FlyoutsControl>-->

			</Grid>

		</materialDesign:DrawerHost>
	</DockPanel>
</Window>
